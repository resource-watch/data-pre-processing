import geopandas as gpd
import os
import glob
import sys
utils_path = os.path.join(os.path.abspath(os.getenv('PROCESSING_DIR')),'utils')
if utils_path not in sys.path:
    sys.path.append(utils_path)
import util_files
import util_cloud
import util_carto
import pandas as pd
import urllib
from zipfile import ZipFile
import logging

# Set up logging
# Get the top-level logger object
logger = logging.getLogger()
for handler in logger.handlers: logger.removeHandler(handler)
logger.setLevel(logging.INFO)
# make it print to the console.
console = logging.StreamHandler()
logger.addHandler(console)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# name of table on Carto where you want to upload data
# this should be a table name that is not currently in use
dataset_name = 'wat_065_rw0_hydropoli_tension_and_institu_vulnerability' #check

logger.info('Executing script for dataset: ' + dataset_name)
# create a new sub-directory within your specified dir called 'data'
# within this directory, create files to store raw and processed data
data_dir = util_files.prep_dirs(dataset_name)

'''
Download data and save to your data directory
'''
logger.info('Downloading raw data')
# insert the url used to download the data from the source website
url = 'http://transboundarywaters.science.oregonstate.edu/sites/transboundarywaters.science.oregonstate.edu/files/Database/Data/Spatial/TFDDSpatialData_Public_20181119.zip' #check

# download the data from the source
raw_data_file = os.path.join(data_dir, os.path.basename(url))
urllib.request.urlretrieve(url, raw_data_file)

# unzip source data
zip_ref = ZipFile(raw_data_file, 'r')
zip_ref.extractall(data_dir)
zip_ref.close()

'''
Process data
'''

# load in the polygon shapefile of basin country units 
shapefile_BCU = glob.glob(os.path.join(raw_data_file.split('.')[0], 'BCU*.shp' ))[0]
gdf_BCU = gpd.read_file(shapefile_BCU)

# load in the polygon shapefile of basins
shapefile_Basin = glob.glob(os.path.join(raw_data_file.split('.')[0], 'Basin*.shp' ))[0]
gdf_Basin = gpd.read_file(shapefile_Basin)

# rename columns so columns containing the same type of information will have the same names
gdf_BCU.rename(columns = {'Pop_2012_P':'Pop_2012', 
                          'PopDen12_P':'PopDen2012',
                          'consumpt': 'consumptio'}, inplace = True)

# add a column in both data frames to show whether it's a basin country unit or basin 
gdf_BCU['type'] = 'Basin Country Unit'
gdf_Basin['type'] = 'Basin'

# concatenate the two dataframes 
gdf = pd.concat([gdf_Basin, gdf_BCU], axis=0, ignore_index=True)

# replace 'N/A' with None in columns
gdf.replace({'N/A': None}, inplace=True)

# convert the data type of column 'runoff', 'withdrawal', and 'consumptio' to float
gdf['runoff'] = gdf['runoff'].astype(float)
gdf['withdrawal'] = gdf['withdrawal'].astype(float)
gdf['consumptio'] = gdf['consumptio'].astype(float)

# convert the data type of column 'HydroPolTe' and 'InstitVuln' to float
gdf['HydroPolTe'] = pd.to_numeric(gdf['HydroPolTe'], errors='coerce').astype('float')
gdf['InstitVuln'] = pd.to_numeric(gdf['InstitVuln'], errors='coerce').astype('float')

# convert the column names to lowercase
gdf.columns = [x.lower() for x in gdf.columns]

# create an index column to use as cartodb_id
gdf['cartodb_id'] = gdf.index.astype(int)

# reorder the columns
gdf = gdf[['cartodb_id'] + list(gdf)[:-1]]

# reproject geometries to epsg 4326
gdf['geometry'] = gdf['geometry'].to_crs(epsg=4326)

# create a path to save the processed shapefile later
processed_data_file = os.path.join(data_dir, dataset_name+'_edit.shp')

# save processed dataset to shapefile
gdf.to_file(processed_data_file,driver='ESRI Shapefile')

'''
Upload original data and processed data to Amazon S3 storage
'''
# initialize AWS variables
aws_bucket = 'wri-public-data'
s3_prefix = 'resourcewatch/'

logger.info('Uploading original data to S3.')
# Copy the raw data into a zipped file to upload to S3
raw_data_dir = os.path.join(data_dir, dataset_name+'.zip')
with ZipFile(raw_data_dir,'w') as zip:
    zip.write(raw_data_file, os.path.basename(raw_data_file))
# Upload raw data file to S3
uploaded = util_cloud.aws_upload(raw_data_dir, aws_bucket, s3_prefix+os.path.basename(raw_data_dir))

logger.info('Uploading processed data to S3.')
# Copy the processed data into a zipped file to upload to S3
processed_data_dir = os.path.join(data_dir, dataset_name+'_edit.zip')
# Find al the necessary components of the shapefile 
processed_data_files = glob.glob(os.path.join(data_dir, dataset_name + '_edit.*'))
with ZipFile(processed_data_dir,'w') as zip:
     for file in processed_data_files:
        zip.write(file, os.path.basename(file))
# Upload processed data file to S3
uploaded = util_cloud.aws_upload(processed_data_dir, aws_bucket, s3_prefix+os.path.basename(processed_data_dir))

'''
Upload processed data to Carto
'''
# upload the shapefile to Carto
util_carto.upload_to_carto(processed_data_dir, 'LINK')
